<template>
    <ui-page >
      <van-card
        :price="item.preferential_price/100"
        :desc="item.introduction"  
        :title="item.name"
        :thumb="item.image"
        :origin-price="item.price/100"
        ui:for="{{ items }}" 
        ui:for-item="item"
      >
        <div slot="num">
          销量：{{item.sale_nums}}
        </div>
        <div slot="footer">
          <van-button size="mini" type="primary" @click="showsku(item)">加入菜谱</van-button>
          <van-button size="mini" type="primary" @click='showsku(item)'>立即点餐</van-button>
        </div>
      </van-card>
      
      <van-sku
        v-model="skuShow"
        stepper-title="购买份数"
        :sku="sku"
        :goods="goods"
        :goods-id="goodsId"
        :quota="quota"
        hide-stock=true
        show-add-cart-btn
        reset-stepper-on-hide
        :initial-sku="initialSku"
        :custom-stepper-config="customStepperConfig"
        @buy-clicked="onBuyClicked"
        @add-cart="onAddCartClicked"
        @sku-selected="onSkuSelected"
      >
        <!-- <template 
          slot="sku-header-price" 
          slot-scope="props"
        >
          <div class="van-sku__goods-price">
            <span class="van-sku__price-symbol">￥</span><span class="van-sku__price-num">{{ props.price }}</span>
          </div>
        </template> -->
        <template slot="sku-actions" slot-scope="props">
          <div class="van-sku-actions">
            <van-button bottom-action @click="onPointClicked">加入菜谱</van-button>
            <van-button type="primary" bottom-action @click="props.skuEventBus.$emit('sku:buy')">立即点餐</van-button>
          </div>
        </template>
      </van-sku>
      


    </ui-page>
</template>

<script>
import { Api, baseUrl } from '#/api.js'
import Vue from 'vue';
import { Card, Button, Sku } from 'vant';
import 'vant/lib/card/style';
import 'vant/lib/button/style';
import 'vant/lib/sku/style';
Vue.use(Card);
Vue.use(Button);
Vue.use(Sku);
export default {
  config: {
    navigationBarTitleText: "菜单列表"
  },
  data () {
    return {
      items: [],
      skuShow: false,
      initialSku: {
        s0: '1',
        s1: '1',
        s2: '1',
        s3: '1',
        s4: '1',
        s5: '1'
      },
      sku: {
        tree:[],
        list:[],
        price:0,
        stock_num:0,
        collection_id:0,
        none_sku:false,
        message:[
          {
            datetime: '0',
            multiple: '1',
            name: '留言',
            type: 'text', 
            required: '0'
          }
        ],
        hide_stock: false
      },
      quota:0,
      goods: {
        title: '测试商品',
        picture: 'https://img.yzcdn.cn/1.jpg'
      },
      goodsId: '',
      customStepperConfig: {
        quotaText: '',
        // 自定义步进器超过限制时的回调
        handleOverLimit: (data) => {
          // const { action, limitType, quota, quotaUsed } = data;
          // if (action === 'minus') {
          //   Toast('至少选择一件商品');
          // } else if (action === 'plus') {
          //   if (limitType === LIMIT_TYPE.QUOTA_LIMIT) {
          //     let msg = `单次限购${quota}件`;
          //     if (quotaUsed > 0) msg += `，你已购买${quotaUsed}`;
          //     Toast(msg);
          //   } else {
          //     Toast('库存不够了');
          //   }
          // }
        }
      }
    }
  },
  methods: {
    onBuyClicked() {

    },
    onAddCartClicked() {

    },
    onPointClicked(){

    },
    onSkuSelected(value){
      if(value.skuValue.imgUrl){
        this.goods.picture=baseUrl+value.skuValue.imgUrl
      }
    },
    showsku(item){
      this.sku.list=[]
      this.sku.tree=[]
      let that=this
      that.skuShow=true
      that.fetch(Api.menusRead.path, {
        method:'GET',
        data: {
          id: item.id
        }
      }).then((response) => {
        that.goodsId = response.id
        that.goods = {
          title: response.name,
          picture: baseUrl + response.image
        }

        let attributions = JSON.parse(response.attributions)
        attributions.map((item,index) => {
          let specs=[]
          for(let i=0; i< item.specValueChecked.length;i++){
            let spec={
              id: i+1,
              name: item.specValueChecked[i]
            }
            if(index==0){
              spec.imgUrl=item.specImageChecked[i]
            }
            specs.push(spec)
          }
          that.sku.tree.push({
            k:item.specName,
            v:specs,
            k_s:'s'+index
          })
        })
        response.specs.map((item) => {
          let sku={
            id: item.id,
            price: item.preferential_price || item.price, 
            stock_num: 110 
          }
          for(let i=0;i<item.specName.length;i++){
            for(let j=0;j<that.sku.tree.length;j++){
              if(that.sku.tree[j].k==item.specName[i]){
                for(let m=0;m<that.sku.tree[j].v.length;m++){
                  if(that.sku.tree[j].v[m].name==item.specValue[i]){
                    sku[that.sku.tree[j].k_s] = that.sku.tree[j].v[m].id
                  }
                }
              }
            }
          }
          that.sku.list.push(sku)
        })
        let price = response.preferential_price || response.price
        that.sku.price = price/100
        that.sku.stock_num = 1000
        that.sku.collection_id = response.id
        that.sku.none_sku = true;
        if(response.specs.length>0){
          that.sku.none_sku = false;
        }
        that.sku.hide_stock = true;
        that.initialSku=that.sku.list[0]

      }).catch((error) => {
        console.log(error)
      })
    }
  },
  created() {
    let query = ui.getQuery()
    let that=this
    this.fetch(Api.menusIndex.path, {
      method:'GET',
      data: {
        cid: query.cid
      }
    }).then((response) => {
       response.list.map((item) => {
         item.image = baseUrl+item.image
         that.items.push(item)
       })
    }).catch((error) => {
      console.log(error)
    })
  }
}

</script>

<style lang="less">

</style>
